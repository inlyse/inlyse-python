[tool.poetry]
name = "inlyse"
version = "1.0.0"  # semantic-release
description = "Python bindings for the INLYSE API"
authors = ["inlyse GmbH <info@inlyse.com>"]
license = "LICENSE.txt"
readme = "README.md"
keywords = ["malware.ai", "inlyse",  "api", "python", "sdk"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.scripts]
inlyse-scanner = "inlyse.app:main"

[project.urls]
homepage = "https://www.inlyse.com"
documentation = "https://documentation.inlyse.cloud/python"
repository = "https://github.com/inlyse/inlyse-python"
changelog = "https://github.com/inlyse/inlyse-python/blob/master/CHANGELOG.md"
"Bug Tracker" = "https://github.com/inlyse/inlyse-python/issues"

[tool.poetry.dependencies]
python = "^3.8.1"
requests = "^2.28.2"
types-requests = "^2.28.11.15"
click = "^8.1.3"
tqdm = "^4.65.0"
loguru = "^0.6.0"
click-params = "^0.4.1"
types-tqdm = "^4.65.0.0"
requests-toolbelt = "^0.10.1"

[tool.poetry.group.dev.dependencies]
pep8 = "^1.7.1"
pre-commit = "^3.1.0"
black = "^23.1.0"
isort = "^5.12.0"
mypy = "^1.0.1"
ruff = "^0.0.258"

[tool.poetry.group.test.dependencies]
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
responses = "^0.23.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^6.1.3"
sphinx-rtd-theme = "^1.2.0"
sphinxcontrib-napoleon = "^0.7"
myst-parser = "^1.0.0"
sphinx-click = "^4.4.0"
sphinx-toolbox = "^3.4.0"

[tool.poetry.extras]
docs = ["Sphinx", "sphinx-rtd-theme", "sphinxcontrib-napoleon"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.bdist_wheel]
universal = 1

[tool.sdist]
formats = "bztar"

[tool.black]
line-length = 79
target-version = ["py38"]
force-exclude = """
(
  /(
      docs/*
    |.*\\.egg-info
  )/
)
"""

[tool.ruff]
select = ["E", "F"]
ignore = []
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
line-length = 120
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py38"

[tool.ruff.mccabe]
max-complexity = 10

[tool.pytest]
norecursedirs = """
    .git
    .env
    dist
    build
"""
addopts = """
    -rxEfsw
    --strict
    --doctest-modules
    --doctest-glob=*.rst
    --tb=short
    --ignore=setup.py
    --ignore=.eggs
    --no-cov-on-fail
    --cov=inlyse
    --cov-report=term-missing
"""

[tool.isort]
ensure_newline_before_comments = true
use_parentheses = true
line_length = 90
multi_line_output = 3
include_trailing_comma = true
not_skip = "__init__.py"
verbose = true
skip = ".env"
skip_glob = ".env/**.py,.venv/**.py"

[tool.check-manifest]
ignore = ".coverage"

[[tool.mypy.overrides]]
module = "click_params"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "requests_toolbelt"
ignore_missing_imports = true
